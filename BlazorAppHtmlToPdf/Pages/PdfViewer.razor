@page "/PdfViewer"
@using BlazorAppHtmlToPdf.Components.Services
@using BlazorAppHtmlToPdf.Components.Model
@inject IPdfService PdfService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>تولید و دانلود PDF</PageTitle>

<h3>تولید و دانلود PDF از لیست داده</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>لیست پیام‌ها</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <h6>داده‌های نمونه:</h6>
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>MessageId</th>
                                <th>Content</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var message in MessageModel)
                            {
                                <tr>
                                    <td>@message.MessageId</td>
                                    <td>@message.Content</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <button class="btn btn-primary w-100" @onclick="GeneratePdf" disabled="@isGenerating">
                    @if (isGenerating)
                    {
                        <span>
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            در حال تولید و دانلود...
                        </span>
                    }
                    else
                    {
                        <span>تولید و دانلود PDF از لیست</span>
                    }
                </button>
            </div>
        </div>

        @if (isGenerating)
        {
            <div class="card mt-3">
                <div class="card-body text-center">
                    <div class="spinner-border text-primary mb-2"></div>
                    <p class="text-muted mb-0">در حال تولید و دانلود PDF...</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Message> MessageModel = new List<Message>
    {
        new Message { MessageId = 1, Content = "salam b hamegi" },
        new Message { MessageId = 2, Content = "salam" },
        new Message { MessageId = 3, Content = "سلام به همه" },
        new Message { MessageId = 4, Content = "پیام تستی" },
        new Message { MessageId = 5, Content = "Test message" }
    };

    private string pdfBase64 = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isGenerating = false;
    private bool shouldDownload = false;
    private string? fileName;
    private CancellationTokenSource? _cancellationTokenSource;

    protected override void OnInitialized()
    {
        _cancellationTokenSource = new CancellationTokenSource();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldDownload && !string.IsNullOrEmpty(pdfBase64))
        {
            shouldDownload = false;
            await TriggerAutoDownload();
        }
    }

    private async Task GeneratePdf()
    {
        if (_cancellationTokenSource?.IsCancellationRequested == true)
            return;

        isGenerating = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        shouldDownload = false;
        StateHasChanged();

        try
        {
            // ارسال لیست به سرویس PDF
            pdfBase64 = await PdfService.GeneratePdfBase64Async(MessageModel);
            fileName = $"messages-report-{DateTime.Now:yyyyMMddHHmmss}.pdf";

            shouldDownload = true;
            successMessage = "PDF با موفقیت تولید شد! دانلود به زودی شروع می‌شود...";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"خطا در تولید PDF: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task TriggerAutoDownload()
    {
        if (string.IsNullOrEmpty(pdfBase64) || string.IsNullOrEmpty(fileName)) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("eval",
                    $@"(function() {{
                    var link = document.createElement('a');
                    link.href = 'data:application/pdf;base64,{pdfBase64}';
                    link.download = '{fileName}';
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }})()");
        }
        catch (Exception ex)
        {
            errorMessage = $"خطا در دانلود: {ex.Message}";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}